# SPDX-FileCopyrightText: 2022 Helmholtz Centre for Environmental Research (UFZ)
# SPDX-FileCopyrightText: 2022 Helmholtz-Zentrum Dresden-Rossendorf (HZDR)
#
# SPDX-License-Identifier: Apache-2.0

---
- name: "Create RSD working directory"
  ansible.builtin.file:
    path: "{{ rsd_working_directory }}"
    owner: "root"
    group: "root"
    state: "directory"
    mode: "0750"

- name: "Copy environment file"
  ansible.builtin.template:
    src: "{{ rsd_environment_file }}"
    dest: "{{ (rsd_working_directory, '.env') | path_join }}"
    owner: "root"
    group: "root"
    mode: "0600"
  no_log: True
  notify: "Restart RSD-as-a-service"

- name: "Copy docker-compose.yml"
  ansible.builtin.template:
    src: "{{ rsd_docker_compose_template_file }}"
    dest: "{{ (rsd_working_directory, 'docker-compose.yml') | path_join }}"
    owner: "root"
    group: "root"
    mode: "0640"
    validate: "docker-compose -f %s config -q"

- name: "Copy nginx configuration file"
  ansible.builtin.template:
    src: "{{ rsd_nginx_config_template }}"
    dest: "{{ (rsd_working_directory, 'nginx.conf') | path_join }}"
    owner: "root"
    group: "root"
    mode: "0640"
  notify: "Restart nginx"

- name: "Generate DH parameters file for nginx"
  community.crypto.openssl_dhparam:
    state: "present"
    path: "{{ rsd_nginx_dhparam_file_path }}"
    size: "{{ rsd_dhparam_size | default('4096') }}"
    owner: "root"
    group: "root"
    mode: "0600"
  when: "create_dhparam_file"
  notify: "Restart nginx"

- name: "Prune docker volumes"
  community.docker.docker_compose:
    project_name: "{{ rsd_compose_project_name }}"
    project_src: "{{ rsd_working_directory }}"
    state: "absent"
    remove_volumes: "yes"
  when:
    - "not is_initial_dryrun"
    - "rsd_prune_volumes | default(false) | bool"

- name: "Start RSD-as-a-service"
  community.docker.docker_compose:
    project_name: "{{ rsd_compose_project_name }}"
    project_src: "{{ rsd_working_directory }}"
    state: "present"
    pull: "{{ pull_images }}"
  tags: "molecule-notest"
  when: "not is_initial_dryrun"

...
